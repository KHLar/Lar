<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="lecture">
	<!-- TABLE_LECTURE  -->
	<insert id="insertLecture">
		<selectKey keyProperty="lecture_index" resultType="_int" order="AFTER">
		SELECT SEQ_LECTURE_INDEX.currval FROM DUAL
		</selectKey>
		INSERT INTO TABLE_LECTURE VALUES(
  		SEQ_LECTURE_INDEX.NEXTVAL,#{lecture_category_index},#{lecture_instructor_index},#{lecture_title},#{lecture_intro},#{lecture_content},#{lecture_level},#{lecture_price},SYSDATE,0,0
 		)
	</insert>
	
	<select id="selectlectureTotalCount" resultType="_int">
		SELECT COUNT(*) FROM TABLE_LECTURE WHERE LECTURE_IS_DELETED = 0
	</select>
	 
	<select id="selectLectureOne" parameterType="_int" resultType="lecture">
	
		SELECT LECTURE_INDEX,USER_NICKNAME,LECTURE_CATEGORY_INDEX,LECTURE_INSTRUCTOR_INDEX,LECTURE_TITLE,LECTURE_INTRO,LECTURE_CONTENT,
		LECTURE_LEVEL,LECTURE_PRICE,LECTURE_UPLOAD_DATE,LECTURE_IS_DELETED,LECTURE_HITS,USER_NICKNAME
		FROM TABLE_LECTURE TL 
		LEFT JOIN TABLE_USER TU ON(TL.LECTURE_INSTRUCTOR_INDEX = TU.USER_INDEX)
		where  LECTURE_INDEX = #{lecture_index}	 
	</select>
	
	<select id="selectLectureList" resultType="lecture">
		SELECT LECTURE_INDEX,USER_NICKNAME,LECTURE_TITLE ,LECTURE_INTRO ,LECTURE_CONTENT,LECTURE_PRICE, LECTURE_TOTAL_SCORE 
		FROM TABLE_LECTURE TL LEFT JOIN TABLE_LECTURE_TOTAL_SCORE TLS ON(TL.LECTURE_INDEX = TLS.TOTAL_LECTURE_INDEX)
		LEFT JOIN TABLE_USER TU ON(TL.LECTURE_INSTRUCTOR_INDEX = TU.USER_INDEX) WHERE
		<if test=" _parameter neq 'total'">
		LECTURE_CATEGORY_INDEX = #{category} AND  
		</if>
		LECTURE_IS_DELETED = 0
	</select>

	<update id="updateLecture" parameterType="lecture">
		UPDATE TABLE_LECTURE
		SET LECTURE_TITLE = #{lecture_title}, LECTURE_INTRO = #{lecture_intro} ,LECTURE_CONTENT = #{lecture_content} , LECTURE_LEVEL= #{lecture_level},LECTURE_PRICE= #{lecture_price}
		WHERE LECTURE_INDEX = #{lecture_index}
	</update> 
	
	<update id="deleteLecture">
		UPDATE TABLE_LECTURE
		SET LECTURE_IS_DELETED =1
		WHERE LECTURE_INDEX = #{index}	
	</update>
	
	<!-- TABLE_LECTURE_BOARD  -->	
	<insert id="insertLectureBoardinsert">
		<selectKey keyProperty="lecture_board_index" resultType="_int" order="AFTER">
			SELECT seq_lecture_board_index.currval FROM DUAL
		</selectKey>
		insert into TABLE_LECTURE_BOARD values(seq_lecture_board_index.nextval,#{lecture_board_lecture_index},#{lecture_board_title},#{lecture_board_content},default,default,0,#{lecture_board_chapter})
	</insert>
	
	<insert id="insertLectureBoardAttachment">
		 <!-- <selectKey keyProperty="lecture_board_index" resultType="_int" order="BEFORE">
			seq_lecture_board_index.CURRVAL FROM DUAL
		</selectKey> --> 
		 INSERT INTO TABLE_LECTURE_ATTACH VALUES(
    		SEQ_LECTURE_ATTACH_INDEX.nextval,#{lecture_attach_board_index},#{lecture_attach_originfilename},#{lecture_attach_renamedfilename},SYSDATE)
    </insert>
	<select id="selectLectureBoardCount" resultType="_int">
		SELECT COUNT(*) FROM TABLE_LECTURE_BOARD
	</select>
	<select id="selectLectureBoardOne" parameterType="_int">
		SELECT * FROM TABLE_LECTURE_BOARD WHERE LECTURE_BOARD_INDEX = #{lecture_board_index} and LECTURE_BOARD_LECTURE_INDEX = #{lecture_board_lecture_index}
	</select>
<!-- 	<update id="deleteLecture">
		UPDATE TABLE_LECTURE_BOARD
		SET LECTURE_IS_DELETED =1
		WHERE LECTURE_INDEX = #{index}	
	</update> -->
	
	<select id="selectBoardList" resultType="lectureBoard">
	  select LECTURE_BOARD_INDEX,LECTURE_BOARD_LECTURE_INDEX,LECTURE_BOARD_TITLE,LECTURE_BOARD_CONTENT,LECTURE_BOARD_HITS,
  	  LECTURE_BOARD_UPLOAD_DATE,LECTURE_BOARD_IS_DELETED,LECTURE_ATTACH_BOARD_INDEX,LECTURE_ATTACH_ORIGINFILENAME,LECTURE_ATTACH_RENAMEDFILENAME,LECTURE_BOARD_CHAPTER
	  from TABLE_LECTURE_BOARD TLB
	  left join TABLE_LECTURE_ATTACH TLA ON(TLB.LECTURE_BOARD_INDEX = TLA.LECTURE_ATTACH_BOARD_INDEX)
	  where LECTURE_BOARD_LECTURE_INDEX = #{lecture_index} order by LECTURE_BOARD_INDEX
	</select>
	
	<select  id="selectLectureBoardAttachmentList" parameterType="_int" resultType="hashmap">
		SELECT * FROM TABLE_LECTURE_BOARD 
		LEFT JOIN TABLE_LECTURE_ATTACH ON(LECTURE_BOARD_INDEX = LECTURE_ATTACH_BOARD_INDEX)
		LEFT JOIN TABLE_LECTURE ON(LECTURE_INDEX = LECTURE_BOARD_LECTURE_INDEX) WHERE LECTURE_INDEX =#{lecture_index}
		ORDER BY LECTURE_BOARD_CHAPTER, LECTURE_BOARD_TITLE
	</select>
	
	<select  id="selectLectureView" resultType="LectureBoard" parameterType="_int">
		<!-- SELECT*FROM TABLE_LECTURE_BOARD WHERE LECTURE_BOARD_INDEX = #{lecture_board_index} -->
		SELECT LECTURE_BOARD_INDEX, LECTURE_INDEX, LECTURE_BOARD_TITLE ,LECTURE_BOARD_CONTENT,LECTURE_BOARD_HITS,
        LECTURE_BOARD_UPLOAD_DATE,LECTURE_BOARD_IS_DELETED FROM   TABLE_LECTURE_BOARD TB
        LEFT JOIN TABLE_LECTURE TL ON(TB.LECTURE_BOARD_LECTURE_INDEX = TL.LECTURE_INDEX) WHERE LECTURE_BOARD_INDEX =#{ lecture_board_index }  AND LECTURE_INDEX =#{ lecture_index }
	</select>
	
	<!-- lectureReview  -->
	
	<insert id="insertLectureReview" parameterType="LectureReview">
	INSERT INTO TABLE_LECTURE_REVIEW VALUES(
	SEQ_LECTURE_REVIEW_INDEX.NEXTVAL,#{lecture_review_lecture_index},#{lecture_review_writer_index},#{lecture_review_title},#{lecture_review_content},#{lecture_review_score},SYSDATE,DEFAULT,0
	)
	</insert>
	
	<select id="reviewList" parameterType="_int" resultType="LectureReview">
	SELECT*FROM TABLE_LECTURE_REVIEW 
	JOIN TABLE_USER ON(LECTURE_REVIEW_WRITER_INDEX = USER_INDEX)
	WHERE LECTURE_REVIEW_LECTURE_INDEX = #{lecture_index}
	</select>
	
	<select id="selectTotalScore"  parameterType="_int"  resultType="LectureTotalScore">
	    SELECT*FROM TABLE_LECTURE_TOTAL_SCORE
        WHERE TOTAL_LECTURE_INDEX =#{lecture_index}
	
	</select>
	
	<insert id="insertTotal" parameterType="_int">
	
	INSERT INTO TABLE_LECTURE_TOTAL_SCORE(TOTAL_LECTURE_INDEX,LECTURE_TOTAL_SCORE,LECTURE_REVIEW_COUNT)
	VALUES(#{lecture_index},(SELECT TRUNC(AVG(LECTURE_REVIEW_SCORE)) FROM TABLE_LECTURE_REVIEW WHERE LECTURE_REVIEW_LECTURE_INDEX=#{lecutre_index})
	,(SELECT COUNT(*) FROM TABLE_LECTURE_REVIEW WHERE LECTURE_REVIEW_LECTURE_INDEX =#{lecture_index})) 
	
	</insert>
	
	<update id="updateStar">
	
	UPDATE TABLE_LECTURE_TOTAL_SCORE 
    SET LECTURE_TOTAL_SCORE = ((SELECT TRUNC(AVG(LECTURE_REVIEW_SCORE)) FROM TABLE_LECTURE_REVIEW WHERE LECTURE_REVIEW_LECTURE_INDEX=#{lecture_index})),
    LECTURE_REVIEW_COUNT = LECTURE_REVIEW_COUNT+1
    WHERE TOTAL_LECTURE_INDEX = #{lecture_index}
		
	</update>

	<insert id="insertQ" parameterType="hashmap">
		INSERT INTO TABLE_LECTURE_Q VALUES(
		 SEQ_LECTURE_Q_INDEX.NEXTVAL, #{useridx}, 1, #{lectureq.lecture_q_title}, #{lectureq.lecture_q_content}, DEFAULT, DEFAULT, DEFAULT, DEFAULT)
	</insert>
	
	<select id="lectureQlist" parameterType="_int" resultType="hashmap">
		SELECT * FROM TABLE_LECTURE_Q JOIN TABLE_USER ON(LECTURE_Q_WRITER_INDEX = USER_INDEX) WHERE LECTURE_Q_LECTURE_INDEX = #{lecidx} AND LECTURE_Q_IS_DELETED = 0
	</select>
	
	<select id="lectureQTotalContents" parameterType="_int" resultType="_int">
		SELECT COUNT(*) FROM TABLE_LECTURE_Q WHERE LECTURE_Q_LECTURE_INDEX = #{lecidx} AND LECTURE_Q_IS_DELETED = 0 
	</select>
	
	<select id="lectureQdetail" parameterType="_int" resultType="lectureQ">
		SELECT * FROM TABLE_LECTURE_Q JOIN TABLE_USER ON(LECTURE_Q_WRITER_INDEX = USER_INDEX) WHERE LECTURE_Q_INDEX = #{qindex}
	</select>
	
	<select id="lectureAdetail" parameterType="_int" resultType="lectureA">
		SELECT * FROM TABLE_LECTURE_A JOIN TABLE_USER ON(LECTURE_A_WRITER_INDEX = USER_INDEX) WHERE LECTURE_A_LECTURE_Q_INDEX = #{qindex}
	</select>
</mapper>
